use Mix.Config

# Configure your database

case System.get_env("DATABASE_URL") do
  nil ->
    config :proca, Proca.Repo,
      username: "proca",
      password: "proca",
      database: "proca",
      hostname: "localhost",
      show_sensitive_data_on_connection_error: true,
      pool_size: 10

  database_url ->
    config :proca, Proca.Repo,
      # ssl: true,
      url: database_url,
      pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10"),
      ssl: true
end

case System.get_env("AMQP_URL") do
  nil ->
    config :proca, Proca.Pipes, url: "amqp://proca:proca@localhost/proca"

  amqp_url ->
    config :proca, Proca.Pipes, url: amqp_url
end

case System.get_env("ORGANISATION") do
  nil ->
    nil

  org_name ->
    config :proca, Proca, org_name: org_name
end

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :proca, ProcaWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ],
  allow_origin: System.get_env("CORS_ALLOW_ORIGIN", "*") |> String.split(~r/\s*,\s*/, trim: true)

# To enable captcha for dev + run with ENABLE_ECI=1
# config :proca, ProcaWeb.Resolvers.Captcha,
#   hcaptcha_key: System.get_env("HCAPTCHA_KEY"),
#   captcha_service: System.get_env("CAPTCHA_SERVICE", "procaptcha")
# config :proca, Proca.Service.Procaptcha, url: System.get_env("PROCAPTCHA_URL")

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :proca, ProcaWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/proca_web/(live|views)/.*(ex)$",
      ~r"lib/proca_web/templates/.*(eex)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
# config :logger, :console, format: "[$level] $message\n"
# Configures Elixir's Logger
config :logger,
  backends: [:console, {LoggerFileBackend, :error_log}, {LoggerFileBackend, :audit_log}],
  format: "$date $time $metadata[$level] $message\n",
  metadata: [:request_id, :user, :operation]

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
